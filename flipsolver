# Initialize parent node variable.
if locals().get("hou_parent") is None:
    hou_parent = hou.node("/obj/BEACH_FLIP")

# Code for /obj/BEACH_FLIP/flipsolver
hou_node = hou_parent.createNode("subnet", "flipsolver", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(0, 0))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setSelected(True)
hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("19.0.383")
# Update the parent node.
hou_parent = hou_node

# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1
hou_node = hou_parent.createNode("flipsolver::2.0", "flipsolver1", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(0.0839285, 2.62863))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setSelected(True)

hou_parm_template_group = hou.ParmTemplateGroup()
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("folder2", "Substeps", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("timescale", "Time Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("minimumsubsteps", "Min Substeps", 1, default_value=([1]), min=1, max=10, min_is_strict=True, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("substeps", "Max Substeps", 1, default_value=([2]), min=1, max=10, min_is_strict=True, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("cflcond", "CFL Condition", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("partcflcond", "Particle Advection CFL", 1, default_value=([0.75]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("quantize", "Quantize to Max Substeps", default_value=True, default_expression='on', default_expression_language=hou.scriptLanguage.Hscript)
hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_callback": ""})
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("folder2_1", "Particle Motion", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("doforces", "Apply External Forces", default_value=True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("enablevolumeattrib", "enablevolumeattrib", default_value=False)
hou_parm_template2.hideLabel(True)
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("volumeoverrideattrib", "Force Override", 1, default_value=(["ballistic"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ enablevolumeattrib == 0 }")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("underresolved", "Under-Resolved Particles", menu_items=(["nodetect","detectonly","ballistic","extrapolated","kill"]), menu_labels=(["No Detection","Detect Only","Treat as Ballistic","Use Extrapolated Velocity","Kill"]), default_value=3, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ veltransfer == apic }")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("collision", "Collision Detection", menu_items=(["none","particle","movetoiso"]), menu_labels=(["None","Particle","Move Outside Collision"]), default_value=1, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("killunmoveable", "Kill Unmoveable Particles", default_value=False, default_expression='off', default_expression_language=hou.scriptLanguage.Hscript)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ collision != movetoiso }")
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder3", "Behavior", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("tankcollision", "Collide with Volume Limits", default_value=True)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ usewaterline == 1 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("killoutside", "Kill Outside Volume Limits", default_value=True, default_expression='on', default_expression_language=hou.scriptLanguage.Hscript)
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("usephysparms", "Use Friction and Bounce", default_value=False, default_expression='off', default_expression_language=hou.scriptLanguage.Hscript)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision != particle }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("doid", "Add ID Attribute", default_value=False)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("doage", "Age Particles", default_value=False, default_expression='off', default_expression_language=hou.scriptLanguage.Hscript)
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("doreapparticles", "Reap Particles", default_value=False, default_expression='off', default_expression_language=hou.scriptLanguage.Hscript)
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("delattribs", "Delete Attributes", 1, default_value=(["underresolved"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder3_1", "Reseeding", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("reseed", "Reseed Particles", default_value=True)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ donarrowband == 1 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("partpervoxel", "Particles Per Voxel", 1, default_value=([8]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ reseed == 0 donarrowband == 0 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("oversampling", "Surface Oversampling", 1, default_value=([1.5]), min=1, max=2, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ reseed == 0 donarrowband == 0 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("oversamplingbandwidth", "Oversampling Bandwidth", 1, default_value=([1]), min=0, max=4, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ reseed == 0 donarrowband == 0 } { oversampling <= 1 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("oversamplebounds", "Oversample At Boundaries", default_value=True, default_expression='on', default_expression_language=hou.scriptLanguage.Hscript)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ reseed == 0 donarrowband == 0 } { oversampling <= 1 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("birththreshold", "Birth Threshold", 1, default_value=([0.5]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ reseed == 0 donarrowband == 0 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("deaththreshold", "Death Threshold", 1, default_value=([1.5]), min=1, max=2, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ reseed == 0 donarrowband == 0 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("seed", "Random Seed", 1, default_value=([0]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ reseed == 0 donarrowband == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("interpattribs", "Interpolate Attributes", 1, default_value=(["v vorticity rest rest2"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ reseed == 0 donarrowband == 0 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000", "script_callback": ""})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder3_2", "Separation", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("partsep", "Apply Particle Separation", default_value=False)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("partsepiter", "Separation Iterations", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ partsep == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("partsepamount", "Separation Rate", 1, default_value=([1]), min=0, max=1, min_is_strict=True, max_is_strict=True, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ partsep == 0 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("partsepscale", "Separation Scale", 1, default_value=([1.0985]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ partsep == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder3_3", "Droplets", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("dodroplets", "Detect Droplets", default_value=False)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("dropletmindensity", "Min Particle Density", 1, default_value=([0.5]), min=0, max=2, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ dodroplets == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("dropletmaxdensity", "Max Particle Density", 1, default_value=([1]), min=0, max=2, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ dodroplets == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.MenuParmTemplate("dropletbehavior", "Behavior", menu_items=(["0","1","2"]), menu_labels=(["Blend With Fluid","Kill On Detection","Kill At Fluid"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ dodroplets == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("dropletvelblend", "Velocity Blend", 1, default_value=([0.2]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ dodroplets == 0 } { dropletbehavior != 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder3_4", "Vorticity", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("dovorticity", "Add Vorticity Attribute", default_value=False)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vorticitypreserve", "Preservation Rate", 1, default_value=([0.1]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ dovorticity == 0 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.MenuParmTemplate("vorticitymix", "Mix Method", menu_items=(["copy","add","sub","mul","div","max","min","average"]), menu_labels=(["Copy","Add","Subtract","Multiply","Divide","Maximum","Minimum","Average"]), default_value=5, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ dovorticity == 0 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vorticityscale", "Vorticity Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ dovorticity == 0 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder3_5", "Rest", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("enable_rest", "Add Rest Attribute", default_value=False)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("dual_rest_attributes", "Dual Rest Attributes", default_value=True)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enable_rest == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("rest_framedelay", "Frames Between Reset", 1, default_value=([50]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enable_rest == 0 } { dual_rest_attributes == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("rest_frameoffset", "Frame Offset", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enable_rest == 0 } { dual_rest_attributes == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("folder2_2", "Volume Motion", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("veltransfer", "Velocity Transfer", menu_items=(["flip","apic"]), menu_labels=(["FLIP (Splashy)","APIC (Swirly)"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("volumeamount", "Force Scale", 1, default_value=([1]), min=0, max=1, min_is_strict=True, max_is_strict=True, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ veltransfer != flip }")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("smoothing", "Velocity Smoothing", 1, default_value=([0.1]), min=0, max=1, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ veltransfer != flip }")
hou_parm_template2.setTags({"units": ""})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("surfacereinit", "Smooth Surface", default_value=True)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ donarrowband == 1 }")
hou_parm_template2.setTags({"units": ""})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("updatesurface", "Update Surface", menu_items=(["none","advect","rebuild"]), menu_labels=(["None","Advect","Rebuild"]), default_value=1, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ donarrowband == 1 }")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("updatevel", "Update Velocity", menu_items=(["none","advect","rebuild"]), menu_labels=(["None","Advect","Rebuild"]), default_value=1, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ donarrowband == 1 }")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder2_2_5", "Volume Limits", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vislimit", "Visualize Limits", default_value=True)
hou_parm_template3.hideLabel(True)
hou_parm_template3.setJoinWithNext(True)
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vislimitcolor", "Visualize Limits", 3, default_value=([0.49773, 0.3753, 0.9]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.ColorSquare, naming_scheme=hou.parmNamingScheme.RGBA)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vislimit == 0 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("limit_size", "Box Size", 3, default_value=([50, 50, 50]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("limit_t", "Box Center", 3, default_value=([0, 0, 0]), min=-1, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("dynamicresize", "Dynamically Resize Fields", default_value=True)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("fillnewvolume", "Fill New Volume", default_value=False)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("usewaterline", "Use Waterline", default_value=False, default_expression='off', default_expression_language=hou.scriptLanguage.Hscript)
hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python)
hou_parm_template3.setTags({"autoscope": "0000000000000000", "script_callback": "", "script_callback_language": "python"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("visualwaterline", "Visualize Waterline", default_value=False)
hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ usewaterline == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("waterline", "Waterline", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ usewaterline == 0 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("waterlinedirection", "Waterline Direction", 3, default_value=([0, 1, 0]), min=-1, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ usewaterline == 0 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("useboundarylayer", "Use Boundary Layer", default_value=False)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("applybound", "Apply Boundary Velocities", default_value=False)
hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useboundarylayer == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("boundary_lowerpadding", "Lower Padding", 3, default_value=([0, 0, 0]), min=0, max=1, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useboundarylayer == 0 }")
hou_parm_template3.setTags({"units": "m1"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("boundary_upperpadding", "Upper Padding", 3, default_value=([0, 0, 0]), min=0, max=1, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useboundarylayer == 0 }")
hou_parm_template3.setTags({"units": "m1"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("boundary_surface", "Surface Volume", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useboundarylayer == 0 }")
hou_parm_template3.setTags({"opfilter": "!!SOP!!", "oprelative": "."})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("boundary_velocity", "Velocity Volume", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useboundarylayer == 0 }")
hou_parm_template3.setTags({"opfilter": "!!SOP!!", "oprelative": "."})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder2_2_5_1", "Collisions", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("collisionvelscale", "Velocity Scale", 1, default_value=([1]), min=1, max=4, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.MenuParmTemplate("veltype", "Velocity Type", menu_items=(["rigid","point","volume"]), menu_labels=(["Rigid","Point","Volume"]), default_value=1, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("extrapdist", "Surface Extrapolation", 1, default_value=([0.5]), min=0, max=1, min_is_strict=True, max_is_strict=True, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.MenuParmTemplate("fractionmethod", "Volume Fraction Method", menu_items=(["supersample","face","tetrahedral","none"]), menu_labels=(["Collision Supersampling","Voxel Face Area","Tetrahedral","None"]), default_value=1, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("numsupersamples", "Samples Per Axis", 1, default_value=([2]), min=1, max=4, min_is_strict=True, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fractionmethod != supersample }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("usetransparency", "Use Transparency", default_value=False)
hou_parm_template3.hideLabel(True)
hou_parm_template3.setJoinWithNext(True)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("transparency", "Transparency", 1, default_value=([0]), min=0, max=1, min_is_strict=True, max_is_strict=True, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ usetransparency == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FolderParmTemplate("stickoncollisionfolder2", "Stick On Collision", folder_type=hou.folderType.Simple, default_value=0, ends_tab_group=False)
hou_parm_template3.setTags({"group_type": "simple"})
# Code for parameter template
hou_parm_template4 = hou.ToggleParmTemplate("enablestick", "Stick on Collision", default_value=True)
hou_parm_template3.addParmTemplate(hou_parm_template4)
# Code for parameter template
hou_parm_template4 = hou.FloatParmTemplate("stickscale", "Stick Scale", 1, default_value=([0.1]), min=0, max=1, min_is_strict=True, max_is_strict=True, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablestick == 0 }")
hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ enablestick == 0 }")
hou_parm_template4.setTags({"autoscope": "0000000000000000", "parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template3.addParmTemplate(hou_parm_template4)
# Code for parameter template
hou_parm_template4 = hou.ToggleParmTemplate("stickusemaxdist", "Use Max Distance", default_value=True, default_expression='on', default_expression_language=hou.scriptLanguage.Hscript)
hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablestick == 0 }")
hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ enablestick == 0 }")
hou_parm_template4.hideLabel(True)
hou_parm_template4.setJoinWithNext(True)
hou_parm_template4.setTags({"autoscope": "0000000000000000", "parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template3.addParmTemplate(hou_parm_template4)
# Code for parameter template
hou_parm_template4 = hou.FloatParmTemplate("stickdist", "Max Distance", 1, default_value=([0.05]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablestick == 0 } { stickusemaxdist == 0 }")
hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ enablestick == 0 }")
hou_parm_template4.setTags({"autoscope": "0000000000000000", "parmvop": "1", "shaderparmcontexts": "cvex", "units": "m1"})
hou_parm_template3.addParmTemplate(hou_parm_template4)
# Code for parameter template
hou_parm_template4 = hou.ToggleParmTemplate("stickusemaxcells", "Use Max Cells", default_value=False, default_expression='off', default_expression_language=hou.scriptLanguage.Hscript)
hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablestick == 0 }")
hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ enablestick == 0 }")
hou_parm_template4.hideLabel(True)
hou_parm_template4.setJoinWithNext(True)
hou_parm_template4.setTags({"autoscope": "0000000000000000", "parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template3.addParmTemplate(hou_parm_template4)
# Code for parameter template
hou_parm_template4 = hou.FloatParmTemplate("stickcells", "Max Cells", 1, default_value=([1]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablestick == 0 } { stickusemaxcells == 0 }")
hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ enablestick == 0 }")
hou_parm_template4.setTags({"autoscope": "0000000000000000", "parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template3.addParmTemplate(hou_parm_template4)
# Code for parameter template
hou_parm_template4 = hou.FloatParmTemplate("stickbias", "Stick Bias", 1, default_value=([0.5]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablestick == 0 }")
hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ enablestick == 0 }")
hou_parm_template4.setTags({"autoscope": "0000000000000000", "parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template3.addParmTemplate(hou_parm_template4)
# Code for parameter template
hou_parm_template4 = hou.FloatParmTemplate("sticknormalscale", "Normal Scale", 1, default_value=([1]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablestick == 0 }")
hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ enablestick == 0 }")
hou_parm_template4.setTags({"autoscope": "0000000000000000", "parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template3.addParmTemplate(hou_parm_template4)
# Code for parameter template
hou_parm_template4 = hou.FloatParmTemplate("sticktangentscale", "Tangent Scale", 1, default_value=([1]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablestick == 0 }")
hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ enablestick == 0 }")
hou_parm_template4.setTags({"autoscope": "0000000000000000", "parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template3.addParmTemplate(hou_parm_template4)
# Code for parameter template
hou_parm_template4 = hou.ToggleParmTemplate("stickusecontrolfield", "Use Control Field", default_value=False, default_expression='off', default_expression_language=hou.scriptLanguage.Hscript)
hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablestick == 0 }")
hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ enablestick == 0 }")
hou_parm_template4.hideLabel(True)
hou_parm_template4.setJoinWithNext(True)
hou_parm_template4.setTags({"autoscope": "0000000000000000", "parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template3.addParmTemplate(hou_parm_template4)
# Code for parameter template
hou_parm_template4 = hou.StringParmTemplate("stickcontrolfield", "Control Field", 1, default_value=(["stick"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablestick == 0 } { stickusecontrolfield == 0 }")
hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ enablestick == 0 }")
hou_parm_template4.setTags({"autoscope": "0000000000000000"})
hou_parm_template3.addParmTemplate(hou_parm_template4)
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder2_2_5_2", "Viscosity", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("viscosity", "Enable Viscosity", default_value=False)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("useadaptiveviscosity", "Solve Viscosity with Adaptivity", default_value=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ viscosity == 0 }")
hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python)
hou_parm_template3.setTags({"script_callback_language": "python"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("doviscosity", "Viscosity by Attribute", default_value=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ viscosity == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("viscosityattrib", "Attribute Name", 1, default_value=(["viscosity"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ doviscosity == 0 } { viscosity == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.MenuParmTemplate("viscositymix", "Mix Method", menu_items=(["copy","add","sub","mul","div","max","min","average"]), menu_labels=(["Copy","Add","Subtract","Multiply","Divide","Maximum","Minimum","Average"]), default_value=0, default_expression='copy', default_expression_language=hou.scriptLanguage.Hscript, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ doviscosity == 0 } { viscosity == 0 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("viscosityscale", "Viscosity Scale", 1, default_value=([1]), min=0, max=10000, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Logarithmic, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ doviscosity == 0 } { viscosity == 0 }")
hou_parm_template3.setTags({"units": ""})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.MenuParmTemplate("viscosityprecision", "Float Precision", menu_items=(["f32b","f64b"]), menu_labels=(["Float 32-bit","Float 64-bit"]), default_value=1, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ viscosity == 0 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("enableslip", "Slip on Collision", default_value=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ viscosity == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("slipscale", "Slip Scale", 1, default_value=([0.1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableslip == 0 } { viscosity == 0 }")
hou_parm_template3.setTags({"export_disable": "1"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("slipusecontrolfield", "Use Control Field", default_value=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ viscosity == 0 } { enableslip == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("slipcontrolfield", "Control Field", 1, default_value=(["slip"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableslip == 0 } { slipusecontrolfield == 0 } { viscosity == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder2_2_5_3", "Density", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("dodensity", "Density by Attribute", default_value=False)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("densityattrib", "Attribute Name", 1, default_value=(["density"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ dodensity == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.MenuParmTemplate("densitymix", "Mix Method", menu_items=(["copy","add","sub","mul","div","max","min","average"]), menu_labels=(["Copy","Add","Subtract","Multiply","Divide","Maximum","Minimum","Average"]), default_value=0, default_expression='copy', default_expression_language=hou.scriptLanguage.Hscript, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ dodensity == 0 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("densityscale", "Density Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ dodensity == 0 }")
hou_parm_template3.setTags({"units": ""})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder2_2_5_4", "Air", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("doincompressibleair", "Enforce Air Incompressibility", default_value=False)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("applycollisionstoair", "Apply Moving Collisions", default_value=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ doincompressibleair == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("minairregionsize", "Min Air Region Voxels", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ doincompressibleair == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder2_2_5_5", "Divergence", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("dodivergence", "Divergence by Attribute", default_value=False)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("divergenceattrib", "Attribute Name", 1, default_value=(["divergence"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ dodivergence == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.MenuParmTemplate("divergencemix", "Mix Method", menu_items=(["copy","add","sub","mul","div","max","min","average"]), menu_labels=(["Copy","Add","Subtract","Multiply","Divide","Maximum","Minimum","Average"]), default_value=0, default_expression='copy', default_expression_language=hou.scriptLanguage.Hscript, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ dodivergence == 0 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("divergencescale", "Divergence Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ dodivergence == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder2_2_5_6", "Surface Tension", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("dosurfacetension", "Enable Surface Tension", default_value=False)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("surfacetension", "Surface Tension", 1, default_value=([10]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ dosurfacetension == 0 }")
hou_parm_template3.setTags({"units": "kg1m-3s-2"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("docurvatureblur", "Enable Surface Tension Blur", default_value=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ dosurfacetension == 0 } { surfacetension == 0 }")
hou_parm_template3.setTags({"export_disable": "1"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("stblurradius", "Blur Radius", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ docurvatureblur == 0 } { dosurfacetension == 0 } { surfacetension == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.MenuParmTemplate("stfilter", "Blur Filter", menu_items=(["box","cone","gaussian"]), menu_labels=(["Box","Cone","Gaussian"]), default_value=2, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ docurvatureblur == 0 } { dosurfacetension == 0 } { surfacetension == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("stblurmaskfield", "Blur Mask Field", 1, default_value=(["surfacepressureblurmask"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ docurvatureblur == 0 } { dosurfacetension == 0 } { surfacetension == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder2_2_5_7", "Solver", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("spatialscale", "Spatial Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"units": "m-1"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("massscale", "Mass Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"units": "kg-1"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("feedbackscale", "Feedback Scale", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"autoscope": "0000000000000000", "units": "kg1m1s-2"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.MenuParmTemplate("extrapmode", "Extrapolation Mode", menu_items=(["normal","fastcoll"]), menu_labels=(["Normal","Fast-moving Colliders"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("autoextrapolatemaxcells", "Automatic Extrapolation By Speed", default_value=True)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("velextrapolatemaxcells", "Max Cells to Extrapolate", 1, default_value=([4]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("usepreconditioner", "Use Preconditioner", default_value=False, default_expression='off', default_expression_language=hou.scriptLanguage.Hscript)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ opencl == 1 }")
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("usewarmstart", "Use Pressure to Warm Start Solver", default_value=True)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("useadaptivepressure", "Solve Pressure with Adaptivity", default_value=False)
hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python)
hou_parm_template3.setTags({"script_callback_language": "python"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("opencl", "Use OpenCL", default_value=False, default_expression='off', default_expression_language=hou.scriptLanguage.Hscript)
hou_parm_template3.setTags({"autoscope": "0000000000000000"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FolderParmTemplate("collisionfieldsfolder2", "Collision Fields For Solver", folder_type=hou.folderType.Simple, default_value=0, ends_tab_group=False)
hou_parm_template3.setTags({"group_type": "simple"})
# Code for parameter template
hou_parm_template4 = hou.StringParmTemplate("collisionsurfacename", "Collision Surface", 1, default_value=(["collision"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.addParmTemplate(hou_parm_template4)
# Code for parameter template
hou_parm_template4 = hou.StringParmTemplate("collisionweightsname", "Collision Weights", 1, default_value=(["collisionweights"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.addParmTemplate(hou_parm_template4)
# Code for parameter template
hou_parm_template4 = hou.StringParmTemplate("collisionvelname", "Collision Velocity", 1, default_value=(["collisionvel"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.addParmTemplate(hou_parm_template4)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FolderParmTemplate("guidingfield2", "Guiding Fields", folder_type=hou.folderType.Simple, default_value=0, ends_tab_group=False)
hou_parm_template3.setTags({"group_type": "simple"})
# Code for parameter template
hou_parm_template4 = hou.StringParmTemplate("sourcesurfacename", "Source Surface", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.addParmTemplate(hou_parm_template4)
# Code for parameter template
hou_parm_template4 = hou.StringParmTemplate("sinksurfacename", "Sink Surface", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.addParmTemplate(hou_parm_template4)
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("folder2_3", "Narrow Band", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("donarrowband", "Enable Particle Narrow Band", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("narrowbandwidth", "Bandwidth", 1, default_value=([3]), min=3, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ donarrowband == 0 }")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("attributefieldpairs", "Attribute-Field Pairs", folder_type=hou.folderType.MultiparmBlock, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("attributepair#", "Attribute", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("fieldpair#", "Field", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("folder2_4", "Distribution", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("address", "Tracker Address", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("port", "Tracker Port", 1, default_value=([8000]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("jobname", "Job Name", 1, default_value=(["${OS}_$F"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("slice", "Slice", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("numslice", "Number of Slices", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("dodistributedsolve", "Distributed Pressure Solve", default_value=False)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.StringParmTemplate("spare_input0", "Spare Input 0", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template.setHelp("Refer to this in expressions as -1, such as: npoints(-1)")
hou_parm_template.setTags({"cook_dependent": "1", "opfilter": "!!SOP!!", "oprelative": "."})
hou_parm_template_group.append(hou_parm_template)
hou_node.setParmTemplateGroup(hou_parm_template_group)
# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/folder01 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("folder01")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(2)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/timescale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("timescale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/minimumsubsteps parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("minimumsubsteps")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/substeps parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("substeps")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(2)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/cflcond parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("cflcond")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/partcflcond parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("partcflcond")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.75)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/quantize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("quantize")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/doforces parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("doforces")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/enablevolumeattrib parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("enablevolumeattrib")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/volumeoverrideattrib parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("volumeoverrideattrib")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("ballistic")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/underresolved parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("underresolved")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("extrapolated")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/collision parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("collision")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("particle")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/killunmoveable parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("killunmoveable")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/folder11 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("folder11")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/tankcollision parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("tankcollision")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/killoutside parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("killoutside")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/usephysparms parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("usephysparms")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/doid parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("doid")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/doage parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("doage")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/doreapparticles parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("doreapparticles")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/delattribs parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("delattribs")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("underresolved")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/reseed parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("reseed")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/partpervoxel parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("partpervoxel")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(8)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/oversampling parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("oversampling")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1.5)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/oversamplingbandwidth parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("oversamplingbandwidth")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/oversamplebounds parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("oversamplebounds")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/birththreshold parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("birththreshold")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.5)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/deaththreshold parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("deaththreshold")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1.5)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/seed parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("seed")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/interpattribs parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("interpattribs")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("v vorticity rest rest2")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/partsep parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("partsep")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/partsepiter parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("partsepiter")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/partsepamount parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("partsepamount")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/partsepscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("partsepscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1.0985)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/dodroplets parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("dodroplets")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/dropletmindensity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("dropletmindensity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.5)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/dropletmaxdensity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("dropletmaxdensity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/dropletbehavior parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("dropletbehavior")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/dropletvelblend parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("dropletvelblend")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.20000000000000001)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/dovorticity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("dovorticity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/vorticitypreserve parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("vorticitypreserve")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.10000000000000001)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/vorticitymix parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("vorticitymix")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("max")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/vorticityscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("vorticityscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/enable_rest parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("enable_rest")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/dual_rest_attributes parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("dual_rest_attributes")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/rest_framedelay parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("rest_framedelay")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(50)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/rest_frameoffset parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("rest_frameoffset")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/veltransfer parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("veltransfer")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("flip")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/volumeamount parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("volumeamount")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/smoothing parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("smoothing")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.11)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/surfacereinit parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("surfacereinit")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/updatesurface parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("updatesurface")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("advect")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/updatevel parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("updatevel")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("advect")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/folder2_2_41 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("folder2_2_41")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/vislimit parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("vislimit")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/vislimitcolor parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm_tuple = hou_node.parmTuple("vislimitcolor")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.49773000000000001, 0.37530000000000002, 0.90000000000000002))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/limit_size parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm_tuple = hou_node.parmTuple("limit_size")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((False, False, False))

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("bbox(-1, D_XSIZE)", hou.exprLanguage.Hscript)
hou_parm_tuple[0].setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("bbox(-1, D_XSIZE)", hou.exprLanguage.Hscript)
hou_parm_tuple[0].setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("bbox(-1, D_XSIZE)", hou.exprLanguage.Hscript)
hou_parm_tuple[0].setKeyframe(hou_keyframe)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("bbox(-1, D_YSIZE)", hou.exprLanguage.Hscript)
hou_parm_tuple[1].setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("bbox(-1, D_YSIZE)", hou.exprLanguage.Hscript)
hou_parm_tuple[1].setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("bbox(-1, D_YSIZE)", hou.exprLanguage.Hscript)
hou_parm_tuple[1].setKeyframe(hou_keyframe)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("bbox(-1, D_ZSIZE)", hou.exprLanguage.Hscript)
hou_parm_tuple[2].setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("bbox(-1, D_ZSIZE)", hou.exprLanguage.Hscript)
hou_parm_tuple[2].setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("bbox(-1, D_ZSIZE)", hou.exprLanguage.Hscript)
hou_parm_tuple[2].setKeyframe(hou_keyframe)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/limit_t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm_tuple = hou_node.parmTuple("limit_t")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((False, False, False))

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("centroid(-1, D_X)", hou.exprLanguage.Hscript)
hou_parm_tuple[0].setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("centroid(-1, D_X)", hou.exprLanguage.Hscript)
hou_parm_tuple[0].setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("centroid(-1, D_X)", hou.exprLanguage.Hscript)
hou_parm_tuple[0].setKeyframe(hou_keyframe)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("centroid(-1, D_Y)", hou.exprLanguage.Hscript)
hou_parm_tuple[1].setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("centroid(-1, D_Y)", hou.exprLanguage.Hscript)
hou_parm_tuple[1].setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("centroid(-1, D_Y)", hou.exprLanguage.Hscript)
hou_parm_tuple[1].setKeyframe(hou_keyframe)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("centroid(-1, D_Z)", hou.exprLanguage.Hscript)
hou_parm_tuple[2].setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("centroid(-1, D_Z)", hou.exprLanguage.Hscript)
hou_parm_tuple[2].setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("centroid(-1, D_Z)", hou.exprLanguage.Hscript)
hou_parm_tuple[2].setKeyframe(hou_keyframe)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/dynamicresize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("dynamicresize")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/fillnewvolume parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("fillnewvolume")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/usewaterline parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("usewaterline")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/visualwaterline parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("visualwaterline")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/waterline parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("waterline")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/waterlinedirection parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm_tuple = hou_node.parmTuple("waterlinedirection")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 1, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/useboundarylayer parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("useboundarylayer")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/applybound parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("applybound")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/boundary_lowerpadding parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm_tuple = hou_node.parmTuple("boundary_lowerpadding")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/boundary_upperpadding parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm_tuple = hou_node.parmTuple("boundary_upperpadding")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/boundary_surface parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("boundary_surface")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/boundary_velocity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("boundary_velocity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/collisionvelscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("collisionvelscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/veltype parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("veltype")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("point")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/extrapdist parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("extrapdist")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.5)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/fractionmethod parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("fractionmethod")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("face")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/numsupersamples parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("numsupersamples")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(2)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/usetransparency parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("usetransparency")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/transparency parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("transparency")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/stickoncollisionfolder parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("stickoncollisionfolder")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/enablestick parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("enablestick")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/stickscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("stickscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.10000000000000001)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/stickusemaxdist parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("stickusemaxdist")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/stickdist parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("stickdist")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.050000000000000003)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/stickusemaxcells parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("stickusemaxcells")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/stickcells parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("stickcells")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/stickbias parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("stickbias")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.5)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/sticknormalscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("sticknormalscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/sticktangentscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("sticktangentscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/stickusecontrolfield parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("stickusecontrolfield")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/stickcontrolfield parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("stickcontrolfield")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("stick")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/viscosity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("viscosity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/useadaptiveviscosity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("useadaptiveviscosity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/doviscosity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("doviscosity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/viscosityattrib parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("viscosityattrib")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("viscosity")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/viscositymix parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("viscositymix")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("copy")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/viscosityscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("viscosityscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/viscosityprecision parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("viscosityprecision")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("f64b")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/enableslip parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("enableslip")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/slipscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("slipscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.10000000000000001)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/slipusecontrolfield parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("slipusecontrolfield")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/slipcontrolfield parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("slipcontrolfield")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("slip")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/dodensity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("dodensity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/densityattrib parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("densityattrib")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("density")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/densitymix parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("densitymix")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("copy")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/densityscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("densityscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/doincompressibleair parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("doincompressibleair")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/applycollisionstoair parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("applycollisionstoair")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/minairregionsize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("minairregionsize")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/dodivergence parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("dodivergence")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/divergenceattrib parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("divergenceattrib")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("divergence")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/divergencemix parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("divergencemix")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("copy")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/divergencescale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("divergencescale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/dosurfacetension parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("dosurfacetension")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/surfacetension parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("surfacetension")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(10)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/docurvatureblur parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("docurvatureblur")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/stblurradius parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("stblurradius")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/stfilter parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("stfilter")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("gaussian")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/stblurmaskfield parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("stblurmaskfield")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("surfacepressureblurmask")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/spatialscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("spatialscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/massscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("massscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/feedbackscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("feedbackscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/extrapmode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("extrapmode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("normal")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/autoextrapolatemaxcells parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("autoextrapolatemaxcells")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/velextrapolatemaxcells parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("velextrapolatemaxcells")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(4)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/usepreconditioner parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("usepreconditioner")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/usewarmstart parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("usewarmstart")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/useadaptivepressure parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("useadaptivepressure")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/opencl parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("opencl")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/collisionfieldsfolder parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("collisionfieldsfolder")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/collisionsurfacename parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("collisionsurfacename")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("collision")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/collisionweightsname parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("collisionweightsname")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("collisionweights")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/collisionvelname parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("collisionvelname")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("collisionvel")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/guidingfield parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("guidingfield")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/sourcesurfacename parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("sourcesurfacename")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/sinksurfacename parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("sinksurfacename")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/donarrowband parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("donarrowband")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/narrowbandwidth parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("narrowbandwidth")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(3)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/attributefieldpairs parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("attributefieldpairs")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/address parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("address")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/port parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("port")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(8000)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/jobname parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("jobname")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("${OS}_$F")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/slice parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("slice")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/numslice parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("numslice")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/dodistributedsolve parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("dodistributedsolve")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/folder21 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("folder21")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(2)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/folder31 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("folder31")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/folder2_2_51 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("folder2_2_51")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(5)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/stickoncollisionfolder2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("stickoncollisionfolder2")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/collisionfieldsfolder2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("collisionfieldsfolder2")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/guidingfield2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("guidingfield2")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipsolver1/spare_input0 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipsolver1")
hou_parm = hou_node.parm("spare_input0")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("/obj/FLIP_SOURCE/BBOX")
hou_parm.setAutoscope(False)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___toolid___", "dynamics_flipbox")
hou_node.setUserData("___Version___", "")
hou_node.setUserData("___toolcount___", "1")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/BEACH_FLIP/flipsolver/flipobject1
hou_node = hou_parent.createNode("flipobject", "flipobject1", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(-4.94043, 4.79536))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setSelected(True)

# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/folder01 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("folder01")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/particlesep parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("particlesep")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.02)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/radiusscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("radiusscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1.2)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/gridscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("gridscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(2)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/overridecollisionsep parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("overridecollisionsep")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionsep parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collisionsep")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.20000000000000001)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/closedends parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("closedends")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/closexpos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("closexpos")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/closexneg parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("closexneg")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/closeypos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("closeypos")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/closeyneg parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("closeyneg")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/closezpos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("closezpos")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/closezneg parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("closezneg")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/usesimframe parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("usesimframe")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/createframe parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("createframe")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(-0.041666666666666664)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("ch(opcreator(\".\")+\"/startframe\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(-0.041666666666666664)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("ch(opcreator(\".\")+\"/startframe\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(-0.041666666666666664)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("ch(opcreator(\".\")+\"/startframe\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(-0.041666666666666664)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("ch(opcreator(\".\")+\"/startframe\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/numobjects parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("numobjects")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/objname parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("objname")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("$OS")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/solvefirstframe parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("solvefirstframe")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/allowcaching parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("allowcaching")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(-0.041666666666666664)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("ch(\"../cacheenabled\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(-0.041666666666666664)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("ch(\"../cacheenabled\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(-0.041666666666666664)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("ch(\"../cacheenabled\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(-0.041666666666666664)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("ch(\"../cacheenabled\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/initialdata1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("initialdata1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surfacetype parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("surfacetype")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("1")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/inittype parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("inittype")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("grid")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/soppath parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("soppath")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("../../FLIP_SOURCE/OUT_PARTICLES")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/import_nbsurface parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("import_nbsurface")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/import_nbvelocity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("import_nbvelocity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/fluid_geometry_file parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("fluid_geometry_file")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/srcobject parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("srcobject")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("$OBJID")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/srcdataname parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("srcdataname")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("Geometry")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/jitterseed parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("jitterseed")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/jitterscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("jitterscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.10000000000000001)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/usetransform parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("usetransform")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/initfluidattribs parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("initfluidattribs")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/initvel parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("initvel")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/velocity parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("velocity")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/addviscosity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("addviscosity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/addtemperature parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("addtemperature")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/adddivergence parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("adddivergence")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/folder41 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("folder41")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/showguide parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("showguide")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscolor parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("viscolor")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 0, 1))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surface_showguide parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("surface_showguide")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surface_color parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("surface_color")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 0.80000000000000004, 0.5))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_showguide parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("vel_showguide")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_color parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("vel_color")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 1, 1))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collision_showguide parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collision_showguide")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collision_color parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("collision_color")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.23715, 0.19700000000000001, 1))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_showguide parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collisionvel_showguide")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_color parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("collisionvel_color")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 1, 1))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/pressure_showguide parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("pressure_showguide")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/pressure_color parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("pressure_color")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.80000000000000004, 0.29999999999999999, 0.69999999999999996))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/source_showguide parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("source_showguide")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/source_color parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("source_color")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 0.90000000000000002, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density_showguide parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("density_showguide")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density_color parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("density_color")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 0.80000000000000004, 0.45000000000000001))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity_showguide parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("viscosity_showguide")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity_color parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("viscosity_color")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.90000000000000002, 0.45000000000000001, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/divergence_showguide parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("divergence_showguide")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/divergence_color parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("divergence_color")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.29999999999999999, 0.5, 0.69999999999999996))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/visprim parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("visprim")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("part")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/visscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("visscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/spriteimage parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("spriteimage")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("sphere_deep.pic")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/guidevistype parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("guidevistype")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("speed")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/guidevismode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("guidevismode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("ramp")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/guidevisramp parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("guidevisramp")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(3)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/guideattrib parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("guideattrib")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("v")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/guidevisscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("guidevisscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/guidedetectrange parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("guidedetectrange")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/guiderange parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("guiderange")
hou_parm_tuple.lock((False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 10))
hou_parm_tuple.setAutoscope((False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surface_usebox parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("surface_usebox")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surface_useboxhash parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("surface_useboxhash")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surface_usesmoke parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("surface_usesmoke")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surface_guideremapsmoke parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("surface_guideremapsmoke")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surface_guidesmokedensity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("surface_guidesmokedensity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surface_guideuseplane parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("surface_guideuseplane")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surface_guideplane parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("surface_guideplane")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("xy")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surface_guideplaneval parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("surface_guideplaneval")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surface_guidevismode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("surface_guidevismode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("false")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surface_guidevisdensitymode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("surface_guidevisdensitymode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("none")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surface_guiderangemode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("surface_guiderangemode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surface_guiderange parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("surface_guiderange")
hou_parm_tuple.lock((False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 1))
hou_parm_tuple.setAutoscope((False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surface_guiderangecenter parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("surface_guiderangecenter")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.5)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surface_guiderangesize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("surface_guiderangesize")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surface_guideiso parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("surface_guideiso")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/surface_guideinvert parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("surface_guideinvert")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_guideusebox parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("vel_guideusebox")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_guideuseboxhash parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("vel_guideuseboxhash")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_guideusesmoke parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("vel_guideusesmoke")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_guidescale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("vel_guidescale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_guideoverridediv parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("vel_guideoverridediv")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_guidediv parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("vel_guidediv")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((10, 10, 10))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_guidebarbs parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("vel_guidebarbs")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_guidepercomp parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("vel_guidepercomp")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_guideusestreamers parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("vel_guideusestreamers")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_guideuseplane parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("vel_guideuseplane")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_guideplane parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("vel_guideplane")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("xy")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_guideplaneval parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("vel_guideplaneval")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_guidestreamerlen parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("vel_guidestreamerlen")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_guidestreamerminspeed parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("vel_guidestreamerminspeed")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.001)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_guidevistype parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("vel_guidevistype")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("speed")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_guidevismode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("vel_guidevismode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("false")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_guidevisscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("vel_guidevisscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.16500000000000001)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/vel_guiderange parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("vel_guiderange")
hou_parm_tuple.lock((False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 1))
hou_parm_tuple.setAutoscope((False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collision_usebox parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collision_usebox")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collision_useboxhash parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collision_useboxhash")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collision_usesmoke parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collision_usesmoke")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collision_guideremapsmoke parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collision_guideremapsmoke")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collision_guidesmokedensity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collision_guidesmokedensity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collision_guideuseplane parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collision_guideuseplane")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collision_guideplane parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collision_guideplane")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("xy")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collision_guideplaneval parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collision_guideplaneval")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collision_guidevismode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collision_guidevismode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("false")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collision_guidevisdensitymode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collision_guidevisdensitymode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("none")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collision_guiderangemode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collision_guiderangemode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collision_guiderange parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("collision_guiderange")
hou_parm_tuple.lock((False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 1))
hou_parm_tuple.setAutoscope((False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collision_guiderangecenter parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collision_guiderangecenter")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.5)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collision_guiderangesize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collision_guiderangesize")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collision_guideiso parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collision_guideiso")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collision_guideinvert parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collision_guideinvert")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_guideusebox parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collisionvel_guideusebox")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_guideuseboxhash parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collisionvel_guideuseboxhash")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_guideusesmoke parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collisionvel_guideusesmoke")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_guidescale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collisionvel_guidescale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_guideoverridediv parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collisionvel_guideoverridediv")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_guidediv parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("collisionvel_guidediv")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((10, 10, 10))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_guidebarbs parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collisionvel_guidebarbs")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_guidepercomp parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collisionvel_guidepercomp")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_guideusestreamers parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collisionvel_guideusestreamers")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_guideuseplane parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collisionvel_guideuseplane")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_guideplane parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collisionvel_guideplane")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("xy")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_guideplaneval parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collisionvel_guideplaneval")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_guidestreamerlen parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collisionvel_guidestreamerlen")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_guidestreamerminspeed parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collisionvel_guidestreamerminspeed")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.001)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_guidevistype parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collisionvel_guidevistype")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("speed")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_guidevismode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collisionvel_guidevismode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("false")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_guidevisscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("collisionvel_guidevisscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/collisionvel_guiderange parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("collisionvel_guiderange")
hou_parm_tuple.lock((False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 1))
hou_parm_tuple.setAutoscope((False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/pressure_usebox parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("pressure_usebox")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/pressure_useboxhash parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("pressure_useboxhash")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/pressure_usesmoke parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("pressure_usesmoke")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/pressure_guideremapsmoke parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("pressure_guideremapsmoke")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/pressure_guidesmokedensity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("pressure_guidesmokedensity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/pressure_guideuseplane parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("pressure_guideuseplane")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/pressure_guideplane parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("pressure_guideplane")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("xy")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/pressure_guideplaneval parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("pressure_guideplaneval")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/pressure_guidevismode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("pressure_guidevismode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("bipartite")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/pressure_guidevisdensitymode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("pressure_guidevisdensitymode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("none")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/pressure_guiderangemode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("pressure_guiderangemode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/pressure_guiderange parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("pressure_guiderange")
hou_parm_tuple.lock((False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((-1, 1))
hou_parm_tuple.setAutoscope((False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/pressure_guiderangecenter parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("pressure_guiderangecenter")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/pressure_guiderangesize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("pressure_guiderangesize")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/pressure_guideiso parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("pressure_guideiso")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/pressure_guideinvert parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("pressure_guideinvert")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/source_usebox parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("source_usebox")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/source_useboxhash parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("source_useboxhash")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/source_usesmoke parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("source_usesmoke")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/source_guideremapsmoke parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("source_guideremapsmoke")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/source_guidesmokedensity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("source_guidesmokedensity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/source_guideuseplane parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("source_guideuseplane")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/source_guideplane parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("source_guideplane")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("xy")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/source_guideplaneval parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("source_guideplaneval")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/source_guidevismode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("source_guidevismode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("false")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/source_guidevisdensitymode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("source_guidevisdensitymode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("none")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/source_guiderangemode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("source_guiderangemode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/source_guiderange parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("source_guiderange")
hou_parm_tuple.lock((False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 1))
hou_parm_tuple.setAutoscope((False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/source_guiderangecenter parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("source_guiderangecenter")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.5)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/source_guiderangesize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("source_guiderangesize")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/source_guideiso parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("source_guideiso")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/source_guideinvert parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("source_guideinvert")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density_usebox parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("density_usebox")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density_useboxhash parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("density_useboxhash")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density_usesmoke parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("density_usesmoke")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density_guideremapsmoke parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("density_guideremapsmoke")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density_guidesmokedensity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("density_guidesmokedensity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.0050000000000000001)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density_guideuseplane parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("density_guideuseplane")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density_guideplane parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("density_guideplane")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("xy")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density_guideplaneval parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("density_guideplaneval")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density_guidevismode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("density_guidevismode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("false")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density_guidevisdensitymode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("density_guidevisdensitymode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("none")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density_guiderangemode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("density_guiderangemode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density_guiderange parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("density_guiderange")
hou_parm_tuple.lock((False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 1000))
hou_parm_tuple.setAutoscope((False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density_guiderangecenter parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("density_guiderangecenter")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.5)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density_guiderangesize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("density_guiderangesize")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density_guideiso parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("density_guideiso")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density_guideinvert parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("density_guideinvert")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity_usebox parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("viscosity_usebox")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity_useboxhash parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("viscosity_useboxhash")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity_usesmoke parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("viscosity_usesmoke")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity_guideremapsmoke parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("viscosity_guideremapsmoke")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity_guidesmokedensity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("viscosity_guidesmokedensity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity_guideuseplane parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("viscosity_guideuseplane")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity_guideplane parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("viscosity_guideplane")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("xy")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity_guideplaneval parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("viscosity_guideplaneval")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity_guidevismode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("viscosity_guidevismode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("false")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity_guidevisdensitymode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("viscosity_guidevisdensitymode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("none")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity_guiderangemode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("viscosity_guiderangemode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity_guiderange parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("viscosity_guiderange")
hou_parm_tuple.lock((False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 1))
hou_parm_tuple.setAutoscope((False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity_guiderangecenter parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("viscosity_guiderangecenter")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.5)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity_guiderangesize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("viscosity_guiderangesize")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity_guideiso parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("viscosity_guideiso")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity_guideinvert parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("viscosity_guideinvert")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/divergence_usebox parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("divergence_usebox")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/divergence_useboxhash parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("divergence_useboxhash")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/divergence_usesmoke parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("divergence_usesmoke")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/divergence_guideremapsmoke parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("divergence_guideremapsmoke")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/divergence_guidesmokedensity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("divergence_guidesmokedensity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/divergence_guideuseplane parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("divergence_guideuseplane")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/divergence_guideplane parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("divergence_guideplane")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("xy")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/divergence_guideplaneval parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("divergence_guideplaneval")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/divergence_guidevismode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("divergence_guidevismode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("bipartite")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/divergence_guidevisdensitymode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("divergence_guidevisdensitymode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("none")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/divergence_guiderangemode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("divergence_guiderangemode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/divergence_guiderange parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("divergence_guiderange")
hou_parm_tuple.lock((False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((-1, 1))
hou_parm_tuple.setAutoscope((False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/divergence_guiderangecenter parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("divergence_guiderangecenter")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.5)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/divergence_guiderangesize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("divergence_guiderangesize")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/divergence_guideiso parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("divergence_guideiso")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/divergence_guideinvert parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("divergence_guideinvert")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/bounce parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("bounce")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/bounceforward parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("bounceforward")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/friction parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("friction")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/dynamicfriction parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("dynamicfriction")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/temperature parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("temperature")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/density parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("density")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1000)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/viscosity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("viscosity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/volumeoffset parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("volumeoffset")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/usepointvelocity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("usepointvelocity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/usesdfvelocity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("usesdfvelocity")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/guidevisramp1pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("guidevisramp1pos")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/guidevisramp1c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("guidevisramp1c")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 0, 0.89999997615814209))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/guidevisramp1interp parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("guidevisramp1interp")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("linear")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/guidevisramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("guidevisramp2pos")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0.5)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/guidevisramp2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("guidevisramp2c")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 0.89999997615814209, 0.89999997615814209))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/guidevisramp2interp parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("guidevisramp2interp")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("linear")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/guidevisramp3pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("guidevisramp3pos")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/guidevisramp3c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm_tuple = hou_node.parmTuple("guidevisramp3c")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 1, 1))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/BEACH_FLIP/flipsolver/flipobject1/guidevisramp3interp parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/flipobject1")
hou_parm = hou_node.parm("guidevisramp3interp")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("linear")
hou_parm.setAutoscope(False)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___toolid___", "dynamics_flipbox")
hou_node.setUserData("___Version___", "")
hou_node.setUserData("___toolcount___", "1")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary
hou_node = hou_parent.createNode("volumesource", "source_surface_from_beachtank_initial_if_boundary", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(5.11136, 5.8582))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setSelected(True)

# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/initialize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("initialize")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("sourceoceanlayer")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/activation parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("activation")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("ch(\"../../beachtank_initial/wavetank/boundary\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("ch(\"../../beachtank_initial/wavetank/boundary\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("ch(\"../../beachtank_initial/wavetank/boundary\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("ch(\"../../beachtank_initial/wavetank/boundary\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/input parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("input")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("sop")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/soppath parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("soppath")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("/obj/FLIP_SOURCE/OUT_VEL")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/xformtype parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("xformtype")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("local")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/xformpath parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("xformpath")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/folder0_11 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("folder0_11")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/createmissing parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("createmissing")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/matchfield parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("matchfield")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("density")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/resizefields parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("resizefields")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/fulltiles parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("fulltiles")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/numvolumes parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("numvolumes")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/sourceparticles parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("sourceparticles")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/sourcegroup parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("sourcegroup")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("boundary")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/offsetscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("offsetscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/offsetseed parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("offsetseed")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/dolife parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("dolife")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/life parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("life")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(100)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/lifevar parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("lifevar")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/killinside parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("killinside")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/killinsidesop parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("killinsidesop")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/killinsidedop parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("killinsidedop")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("surface")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/streamname parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("streamname")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("$OS")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/instancing parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("instancing")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/activate1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("activate1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/clamped1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("clamped1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/rank1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("rank1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("vector")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/volume1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("volume1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("vel")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/weightvolume1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("weightvolume1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/vfield1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("vfield1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("vel")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/vweightfield1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("vweightfield1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/sopmask1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("sopmask1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/sopmabsolute1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("sopmabsolute1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/sopsdf1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("sopsdf1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/mask1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("mask1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/mabsolute1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("mabsolute1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/msdf1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("msdf1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/vscale1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("vscale1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/vnormalize1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("vnormalize1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/voperator1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("voperator1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("copy")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/usenorm1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("usenorm1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/nonneg1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("nonneg1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/accguidestr1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("accguidestr1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/decguidestr1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("decguidestr1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/enabledirblend1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("enabledirblend1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary/dirguidestr1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_surface_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("dirguidestr1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___toolid___", "pyro_smoketrail")
hou_node.setUserData("___Version___", "")
hou_node.setUserData("___toolcount___", "3")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/BEACH_FLIP/flipsolver/merge3
hou_node = hou_parent.createNode("merge", "merge3", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(3.08313, 4.25514))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setSelected(True)

# Code for /obj/BEACH_FLIP/flipsolver/merge3/activation parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/merge3")
hou_parm = hou_node.parm("activation")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(-0.041666666666666664)
hou_keyframe.setValue(1)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("constant()", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(-0.041666666666666664)
hou_keyframe.setValue(1)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("constant()", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(-0.041666666666666664)
hou_keyframe.setValue(1)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("constant()", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(-0.041666666666666664)
hou_keyframe.setValue(1)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("constant()", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/BEACH_FLIP/flipsolver/merge3/activationrules parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/merge3")
hou_parm = hou_node.parm("activationrules")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("always")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/merge3/affectortype parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/merge3")
hou_parm = hou_node.parm("affectortype")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("ordered")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/merge3/relationship parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/merge3")
hou_parm = hou_node.parm("relationship")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("SIM_RelationshipCollide")
hou_parm.setAutoscope(False)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___toolid___", "dynamics_beachtank")
hou_node.setUserData("___Version___", "19.0.383")
hou_node.setUserData("___toolcount___", "1")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("19.0.383")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary
hou_node = hou_parent.createNode("volumesource", "source_sink_from_beachtank_initial_if_boundary", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(1.68864, 5.5629))
hou_node.bypass(True)
hou_node.setDisplayFlag(True)
hou_node.hide(False)
hou_node.setSelected(True)

# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/initialize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("initialize")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("sinkflip")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/activation parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("activation")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("ch(\"/obj/beachtank_initial/wavetank/boundary\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("ch(\"/obj/beachtank_initial/wavetank/boundary\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("ch(\"/obj/beachtank_initial/wavetank/boundary\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.setInValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.setInSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("ch(\"/obj/beachtank_initial/wavetank/boundary\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/input parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("input")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("sop")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/soppath parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("soppath")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("/obj/FLIP_SOURCE/OUT_SINK")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/xformtype parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("xformtype")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("local")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/xformpath parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("xformpath")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/folder0_11 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("folder0_11")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/createmissing parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("createmissing")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/matchfield parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("matchfield")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("density")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/resizefields parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("resizefields")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/fulltiles parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("fulltiles")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/numvolumes parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("numvolumes")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/sourceparticles parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("sourceparticles")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/sourcegroup parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("sourcegroup")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("particles")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/offsetscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("offsetscale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/offsetseed parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("offsetseed")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/dolife parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("dolife")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/life parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("life")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(100)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/lifevar parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("lifevar")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/killinside parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("killinside")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/killinsidesop parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("killinsidesop")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("sink")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/killinsidedop parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("killinsidedop")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/streamname parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("streamname")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("$OS")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/instancing parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("instancing")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/activate1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("activate1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/clamped1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("clamped1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/rank1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("rank1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("scalar")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/volume1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("volume1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("sink")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/weightvolume1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("weightvolume1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/vfield1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("vfield1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("surface")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/vweightfield1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("vweightfield1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/sopmask1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("sopmask1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/sopmabsolute1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("sopmabsolute1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/sopsdf1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("sopsdf1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/mask1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("mask1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/mabsolute1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("mabsolute1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/msdf1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("msdf1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/vscale1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("vscale1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/vnormalize1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("vnormalize1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/voperator1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("voperator1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("mul")
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/usenorm1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("usenorm1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/nonneg1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("nonneg1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/accguidestr1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("accguidestr1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/decguidestr1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("decguidestr1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/enabledirblend1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("enabledirblend1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary/dirguidestr1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/BEACH_FLIP/flipsolver/source_sink_from_beachtank_initial_if_boundary")
hou_parm = hou_node.parm("dirguidestr1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___toolid___", "pyro_smoketrail")
hou_node.setUserData("___Version___", "")
hou_node.setUserData("___toolcount___", "3")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code to establish connections for /obj/BEACH_FLIP/flipsolver/flipsolver1
hou_node = hou_parent.node("flipsolver1")
if hou_parent.node("flipobject1") is not None:
    hou_node.setInput(0, hou_parent.node("flipobject1"), 0)
if hou_parent.node("merge3") is not None:
    hou_node.setInput(3, hou_parent.node("merge3"), 0)
# Code to establish connections for /obj/BEACH_FLIP/flipsolver/merge3
hou_node = hou_parent.node("merge3")
if hou_parent.node("source_sink_from_beachtank_initial_if_boundary") is not None:
    hou_node.setInput(0, hou_parent.node("source_sink_from_beachtank_initial_if_boundary"), 0)
if hou_parent.node("source_surface_from_beachtank_initial_if_boundary") is not None:
    hou_node.setInput(1, hou_parent.node("source_surface_from_beachtank_initial_if_boundary"), 0)

# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

